"use strict";(self.webpackChunkknowledge_bank=self.webpackChunkknowledge_bank||[]).push([[9898],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},s=Object.keys(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,c=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),p=l(n),m=a,f=p["".concat(c,".").concat(m)]||p[m]||u[m]||s;return n?r.createElement(f,o(o({ref:t},d),{},{components:n})):r.createElement(f,o({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,o=new Array(s);o[0]=p;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var l=2;l<s;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},4127:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const s={title:"\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c",sidebar_position:8},o=void 0,i={unversionedId:"frontend/react/archive/api/async",id:"frontend/react/archive/api/async",title:"\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c",description:"setTimeout",source:"@site/docs/frontend/react/88-archive/3-api/8-async.md",sourceDirName:"frontend/react/88-archive/3-api",slug:"/frontend/react/archive/api/async",permalink:"/knowledge-bank/docs/frontend/react/archive/api/async",draft:!1,editUrl:"https://github.com/EvgenyLeukhin/knowledge-bank/edit/main/docs/frontend/react/88-archive/3-api/8-async.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{title:"\u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c",sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"websocket",permalink:"/knowledge-bank/docs/frontend/react/archive/api/websocket"},next:{title:"XMLHttpReqest \u0438 fetch \u043e\u0442 \u042f",permalink:"/knowledge-bank/docs/frontend/react/archive/api/xml-request"}},c={},l=[{value:"setTimeout",id:"settimeout",level:2},{value:"setInterval",id:"setinterval",level:2},{value:"\u0418\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b",id:"\u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u044c\u043d\u044b\u0435-\u0437\u0430\u043f\u0440\u043e\u0441\u044b",level:2},{value:"\u0420\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u044b\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b",id:"\u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u044b\u0435-\u0437\u0430\u043f\u0440\u043e\u0441\u044b",level:2}],d={toc:l};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"settimeout"},"setTimeout"),(0,a.kt)("p",null,"\u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043e\u0434\u0438\u043d \u0440\u0430\u0437 \u0441\u043f\u0443\u0441\u0442\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043f\u0440\u043e\u043c\u0435\u0436\u0443\u0442\u043e\u043a. \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u0432 nodejs."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"setTimeout(() => {\n  alert('Async output');\n}, 1000);\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"function returnAlert(x) {\n  alert(x);\n}\n\nsetTimeout(() => {\n  returnAlert('Hello, World!');\n}, 1000);\n")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"setinterval"},"setInterval"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"let counter = 0;\n\nconst intervalId = setInterval(() => {\n  counter++;\n  console.log('Counter:', counter);\n\n  if (counter === 10) {\n    clearInterval(intervalId);\n  }\n}, 1000);\n")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"\u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u044c\u043d\u044b\u0435-\u0437\u0430\u043f\u0440\u043e\u0441\u044b"},"\u0418\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u044c\u043d\u044b\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// 2 - \u0442\u043e\u0447\u0435\u043d\u044b\u0439 \u044d\u043a\u0448\u0435\u043d \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0432\u043e\u0440\u043a\u043b\u043e\u0433\u0430 \u043e\u0434\u043d\u043e\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044f\nexport const getWorklogSingle = (\n  id: string,\n  dateFrom: Dayjs | null,\n  dateTo: Dayjs | null,\n) => {\n  return async function (dispatch: Dispatch<any>) {\n    let tasksCodes: string[] = [];\n\n    // fix date format to API request\n    const _dateFrom = `${dayjs(dateFrom).format(FORMAT_TYPE)}T00:00:00`;\n    const _dateTo = `${dayjs(dateTo).format(FORMAT_TYPE)}T23:59:59`;\n\n    // find current perfomer data\n    const selectedPerformer = store\n      .getState()\n      .performers.items.find(item => Number(item.trackerId) === Number(id));\n\n    const { data, success, error } = await SearchService.searchWorklogs(\n      id, // id \u0438\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044f\n      _dateFrom,\n      _dateTo,\n    );\n\n    // success\n    if (success && data) {\n      // \u0435\u0441\u043b\u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u043f\u0443\u0441\u0442\u044b\u0435, \u0442\u043e \u043e\u0442\u043c\u0435\u043d\u044f\u0435\u043c \u043f\u043e\u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f\n      if (!data.length) {\n        dispatch(setLoading(false));\n        dispatch(\n          setErrors(\n            `${selectedPerformer?.lastName} ${selectedPerformer?.firstName} - \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0439 \u043f\u0435\u0440\u0438\u043e\u0434 \u043d\u0435 \u043d\u0430\u0439\u0434\u0435\u043d\u043e`,\n          ),\n        );\n        return;\n      }\n\n      const _data = data.reduce<Record<string, TWorklogTaskData[]>>(\n        (total, item) => {\n          // \u043e\u0431\u0440\u0435\u0437\u0430\u0435\u043c \u0441\u0442\u0440\u043e\u043a\u0443 \u0434\u0430\u0442\u044b \u0434\u043e \u0444\u043e\u0440\u043c\u0430\u0442\u0430 YYYY-MM-DD\n          const logDay = item.start.slice(0, 10); // createdAt | start\n\n          // \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043e\u0431\u044a\u0435\u043a\u0442 \u0437\u0430\u0434\u0430\u0447 \u0441 \u043d\u0443\u0436\u043d\u044b\u043c\u0438 \u043d\u0430\u043c \u043f\u043e\u043b\u044f\u043c\u0438\n          const logTask: TWorklogTaskData = {\n            code: item.issue.key,\n            name: item.issue.display,\n            link: item.issue.self,\n            comment: item.comment || null,\n            createdAt: item.createdAt,\n            duration: CalculateHoursFromTrackerTask(item.duration),\n          };\n\n          if (!tasksCodes.includes(logTask.code)) {\n            tasksCodes.push(logTask.code);\n          }\n\n          // \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0434\u0435\u043d\u044c \u043a\u0430\u043a \u043f\u043e\u043b\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0441\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u043c \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0437\u0430\u043b\u043e\u0433\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447\n          total[logDay] = [...(total[logDay] || []), logTask];\n\n          return total;\n        },\n        {},\n      );\n\n      // \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u0432\u0438\u0434\u043e\u0438\u0437\u043c\u0435\u043d\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432\u043e\u0440\u043a\u043b\u043e\u0433\u0430\n      dispatch(\n        setWorklogs({\n          performer:\n            `${selectedPerformer?.lastName} ${selectedPerformer?.firstName}` ||\n            id,\n          data: _data,\n        }),\n      );\n\n      // \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u043a\u043e\u0434\u044b \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u043a\u0430\u043a \u043a\u043b\u044e\u0447\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0441 \u043f\u0443\u0441\u0442\u044b\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u043c\u0438\n      dispatch(setFoundTasks(tasksCodes));\n\n      // error\n    } else {\n      const errorMessage = error?.message || '\u041e\u0448\u0438\u0431\u043a\u0430 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0438 \u0432\u043e\u0440\u043a\u043b\u043e\u0433\u043e\u0432';\n      dispatch(setLoading(false));\n      dispatch(setErrors(errorMessage));\n    }\n  };\n};\n\n// 1 - \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u0442 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u044c\u043d\u044b\u0435 \u044d\u043a\u0448\u0435\u043d\u044b \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0432\u043e\u0440\u043a\u043b\u043e\u0433\u0430\nexport const getWorklogsMultiply = (\n  selectedPerformers: TPerformetOption[],\n  dateFrom: Dayjs | null,\n  dateTo: Dayjs | null,\n) => {\n  return async function (dispatch: Dispatch<any>) {\n    // pre-request reset state\n    dispatch(resetData());\n    dispatch(setLoading(true));\n\n    if (!selectedPerformers.length) {\n      dispatch(setLoading(false));\n      dispatch(setErrors('\u041e\u0442\u0441\u0443\u0442\u0441\u0432\u0443\u044e\u0442 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0435 \u0438\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u0438'));\n      return;\n    }\n\n    const firstPerformerId = `${selectedPerformers[0].key}`;\n\n    // \u0435\u0441\u043b\u0438 \u0432\u044b\u0431\u0440\u0430\u043d \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u0438\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c - \u0434\u0435\u043b\u0430\u0435\u043c \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u0438\u043d \u0437\u0430\u043f\u0440\u043e\u0441\n    if (selectedPerformers.length === 1) {\n      dispatch(getWorklogSingle(firstPerformerId, dateFrom, dateTo));\n\n      // \u0438 \u0441\u043f\u0443\u0441\u0442\u044f \u0442\u0430\u0439\u043c\u0430\u0443\u0442 \u0434\u0435\u043b\u0430\u0435\u043c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043f\u043e \u0442\u0438\u043f\u0430\u043c \u0437\u0430\u0434\u0430\u0447\n      setTimeout(() => {\n        dispatch(searchTasksTypes()); // \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u043e\u0432 \u0437\u0430\u0434\u0430\u0447 \u043e\u0434\u043d\u0438\u043c \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u043c\n      }, REQUEST_INTERVAL + 100);\n\n      // \u0435\u0441\u043b\u0438 \u0432\u044b\u0431\u0440\u0430\u043d\u043e \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0438\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u0435\u0439\n    } else {\n      // \u0442\u043e \u0441\u0440\u0430\u0437\u0443 \u0434\u0435\u043b\u0430\u0435\u043c \u0437\u0430\u043f\u0440\u043e\u0441 \u0434\u043b\u044f \u043f\u0435\u0440\u0432\u043e\u0433\u043e\n      dispatch(getWorklogSingle(firstPerformerId, dateFrom, dateTo));\n\n      // \u0430 \u0434\u043b\u044f \u043e\u0441\u0442\u0430\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0434\u0435\u043b\u0430\u0435\u043c \u0447\u0435\u0440\u0435\u0437 \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\u044b REQUEST_INTERVAL\n      let counter = 1;\n      const intervalId = setInterval(() => {\n        dispatch(\n          getWorklogSingle(\n            `${selectedPerformers[counter].key}`, // counter - \u0445\u0440\u0430\u043d\u0438\u0442 \u0438\u043d\u0434\u0435\u043a\u0441 \u0438\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044f\n            dateFrom,\n            dateTo,\n          ),\n        );\n\n        // counter - \u0443\u0432\u0435\u043b\u0438\u0447\u0432\u0430\u0435\u043c \u0441\u0447\u0435\u0442\u0447\u0438\u043a \u043d\u0430 1\n        counter++;\n\n        if (counter === selectedPerformers.length) {\n          // \u043e\u0447\u0438\u0449\u0430\u0435\u043c \u0438\u043d\u0442\u0435\u0440\u0432\u0430\u043b\n          clearInterval(intervalId);\n\n          // \u0438 \u0441\u043f\u0443\u0441\u0442\u044f \u0442\u0430\u0439\u043c\u0430\u0443\u0442 \u0434\u0435\u043b\u0430\u0435\u043c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043f\u043e \u0442\u0438\u043f\u0430\u043c \u0437\u0430\u0434\u0430\u0447\n          setTimeout(() => {\n            dispatch(searchTasksTypes()); // \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0435 \u0442\u0438\u043f\u043e\u0432 \u0437\u0430\u0434\u0430\u0447 \u043e\u0434\u043d\u0438\u043c \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u043c\n          }, REQUEST_INTERVAL + 100);\n        }\n      }, REQUEST_INTERVAL);\n    }\n  };\n};\n")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"\u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u044b\u0435-\u0437\u0430\u043f\u0440\u043e\u0441\u044b"},"\u0420\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u044b\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// \u041d\u041e\u0412\u0410\u042f \u0420\u0423\u0427\u041a\u0410 (`v2/auto-routing/couriers${params}`) - \u0441 \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c \u0438 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0435\u0439\n// \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0434\u043b\u044f \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432, \u0442\u0430\u043a \u043a\u0430\u043a \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u0437\u0430\u043f\u0440\u043e\u0441\u0443 \u0434\u043e\u043b\u0433\u043e \u0433\u0440\u0443\u0437\u044f\u0442\u0441\u044f (\u043a\u0430\u043a \u0432 \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0432\u044b\u0448\u0435)\nexport const getAutoRoutingCouriersRecursive = (limit: number = 10, offset: number = 0) => {\n  return async function (dispatch: Dispatch<any>) {\n    dispatch(setCouriersLoading(true));\n\n    // filters\n    const filters = store.getState().orders.filters;\n\n    // query\n    const dataParams = generateQueryString({\n      hubId: filters.hubIds[0],\n      offset,\n      limit,\n      deliveryDate: filters.deliveryDate,\n    });\n\n    // \u0437\u0430\u043f\u0440\u043e\u0441 \u043a\u0443\u0440\u044c\u0435\u0440\u043e\u0432 c \u0440\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c\n    const data = await autoRouteService.getCouriersWithPagination(dataParams);\n\n    if (data) {\n      // get fields from data\n      const { items, lastPage, nextOffset } = data;\n\n      // success\n      if (items) {\n        dispatch(setCouriersLoading(false));\n        const routes = [...store.getState().routes.routes, ...store.getState().routes.exportedRoutes];\n\n        // \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u043c \u043a\u0443\u0440\u044c\u0435\u0440\u043e\u0432 [...state.couriers, ...payload];\n        dispatch(getCouriersByRecursive(fillWithStops(items, routes)));\n\n        // \u0435\u0441\u043b\u0438 \u043d\u0435 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u044f\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430, \u043f\u043e\u0432\u0440\u0442\u043e\u0440\u044f\u0435\u043c \u0437\u0430\u043f\u0440\u043e\u0441\u044b - \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u043c \u044d\u0442\u043e\u0442 \u0436\u0435 \u044d\u043a\u0448\u0435\u043d \u0440\u0435\u043a\u0443\u0440\u0441\u0438\u0432\u043d\u043e\n        if (!lastPage) {\n          dispatch(getAutoRoutingCouriersRecursive(limit, nextOffset));\n\n          // \u0435\u0441\u043b\u0438 \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0438 \u043f\u043e\u043b\u0435 lastPage = true, \u0442\u043e \u043e\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u043c \u0440\u0435\u043a\u0443\u0441\u0438\u044e\n        } else {\n          dispatch(setCouriersLoading(false));\n          return;\n        }\n\n        // error\n      } else {\n        dispatch(setCouriersLoading(false));\n        setMessageAction(messageHandler('\u041e\u0448\u0438\u0431\u043a\u0430 \u043f\u0440\u0438 \u0437\u0430\u0433\u0440\u0443\u0437\u043a\u0435 \u043a\u0443\u0440\u044c\u0435\u0440\u043e\u0432'));\n      }\n    }\n  };\n};\n")))}u.isMDXComponent=!0}}]);