"use strict";(self.webpackChunkknowledge_bank=self.webpackChunkknowledge_bank||[]).push([[6584],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>m});var r=t(7294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,s=function(e,n){if(null==e)return{};var t,r,s={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var c=r.createContext({}),u=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},l=function(e){var n=u(e.components);return r.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,s=e.mdxType,o=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),p=u(t),m=s,f=p["".concat(c,".").concat(m)]||p[m]||d[m]||o;return t?r.createElement(f,a(a({ref:n},l),{},{components:t})):r.createElement(f,a({ref:n},l))}));function m(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var o=t.length,a=new Array(o);a[0]=p;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:s,a[1]=i;for(var u=2;u<o;u++)a[u]=t[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},6226:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>u});var r=t(7462),s=(t(7294),t(3905));const o={title:"Store \u0438 provider",sidebar_position:1},a=void 0,i={unversionedId:"frontend/react/archive/redux/provider",id:"frontend/react/archive/redux/provider",title:"Store \u0438 provider",description:"Provider",source:"@site/docs/frontend/react/88-archive/2-redux/1-provider.md",sourceDirName:"frontend/react/88-archive/2-redux",slug:"/frontend/react/archive/redux/provider",permalink:"/knowledge-bank/docs/frontend/react/archive/redux/provider",draft:!1,editUrl:"https://github.com/EvgenyLeukhin/knowledge-bank/edit/main/docs/frontend/react/88-archive/2-redux/1-provider.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Store \u0438 provider",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"\u0423\u0441\u0442\u0430\u043d\u043e\u0432\u043a\u0430",permalink:"/knowledge-bank/docs/frontend/react/archive/redux/install"},next:{title:"\u0421\u043b\u0430\u0439\u0441\u044b",permalink:"/knowledge-bank/docs/frontend/react/archive/redux/slices"}},c={},u=[{value:"Provider",id:"provider",level:2},{value:"Store",id:"store",level:2},{value:"Persist",id:"persist",level:2},{value:"Persist Provider",id:"persist-provider",level:2},{value:"\u041f\u0440\u0438\u043c\u0435\u0440 store",id:"\u043f\u0440\u0438\u043c\u0435\u0440-store",level:2},{value:"Counter slice",id:"counter-slice",level:3},{value:"Users slice",id:"users-slice",level:3},{value:"Users thunks",id:"users-thunks",level:3},{value:"Use inside component",id:"use-inside-component",level:3}],l={toc:u};function d(e){let{components:n,...t}=e;return(0,s.kt)("wrapper",(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"provider"},"Provider"),(0,s.kt)("p",null,"\u041d\u0443\u0436\u043d\u043e \u043e\u0431\u0435\u0440\u043d\u0443\u0442\u044c \u0432\u0441\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0432 Provider, \u0447\u0442\u043e\u0431\u044b redux \u0438\u043c\u0435\u043b \u0434\u043e\u0441\u0442\u0443\u043f \u043a\u043e \u0432\u0441\u0435\u043c\u0443 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044e."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"import * as React from 'react';\nimport { render } from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './App';\nimport { store } from './store';\n\nconst rootElement = document.getElementById('root');\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n\n  rootElement\n);\n")),(0,s.kt)("hr",null),(0,s.kt)("h2",{id:"store"},"Store"),(0,s.kt)("p",null,"\u0422\u043e\u0447\u043a\u0430 \u0432\u0445\u043e\u0434\u0430 \u0432\u0441\u0435\u0445 \u0440\u0435\u0434\u044c\u044e\u0441\u0435\u0440\u043e\u0432."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"import { configureStore, bindActionCreators } from '@reduxjs/toolkit';\nimport { TypedUseSelectorHook, useSelector, useDispatch } from 'react-redux';\nimport { api } from './api/api';\n\n// \u0432 \u0433\u043b\u0430\u0432\u044b\u043d\u044b\u0439 reducer \u0441\u0442\u043e\u0440\u0430 \u0432\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u044e\u0442\u0441\u044f \u0432\u0441\u0435 reducer-\u044b \u0441\u043b\u0430\u0439\u0441\u043e\u0432 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f\nexport const store = configureStore({\n  // root reducer\n  reducer: {\n    slice1: slice1.reducer,\n    slice2: slice2.reducer,\n    ...,\n    sliceN: sliceN.reducer,\n\n    // create api slice\n    [api.reducerPath]: api.reducer,\n  },\n});\n\n// \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044f \u0432\u0441\u0435\u0433\u043e \u0441\u0442\u0435\u0439\u0442\u0430\nexport type RootState = ReturnType<typeof storeToolkit2.getState>;\n\n// \u0445\u0443\u043a, \u043a\u043e\u0442\u043e\u0440\u0432\u044b\u0439 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0432\u0435\u0441\u044c store (\u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u043d\u0443\u0442\u0440\u0438 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432)\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n\n// \u0445\u0443\u043a, \u043a\u043e\u0442\u043e\u0440\u0432\u044b\u0439 \u0445\u0440\u0430\u043d\u0438\u0442 \u0432\u0441\u0435 \u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0435 \u044d\u043a\u0448\u0435\u043d\u044b (\u043c\u043e\u0436\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u043d\u0443\u0442\u0440\u0438 \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442\u043e\u0432)\nexport const useSyncActions = () => {\n  const dispatch = useDispatch();\n\n  return bindActionCreators({\n    // \u0438\u043c\u043f\u043e\u0440\u0442 \u0432\u0441\u0435\u0445 \u044d\u043a\u0448\u0435\u043d\u043e\u0432 \u0438 \u0440\u0435\u0434\u044c\u044e\u0441\u0435\u0440\u043e\u0432\n    ...slice1.actions,\n    ...slice2.actions,\n    ...,\n    ...sliceN.actions,\n    }, dispatch);\n};\n\n// \u0434\u043e\u043f. \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044f \n// export type AppStore = ReturnType<typeof store> as any;\n// export type AppDispatch = AppStore['dispatch'];\n")),(0,s.kt)("hr",null),(0,s.kt)("h2",{id:"persist"},"Persist"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import { combineReducers, configureStore } from '@reduxjs/toolkit';\nimport storage from 'redux-persist/lib/storage';\nimport { persistReducer } from 'redux-persist';\n\n// reducers\nimport reducer1 from '@store/reducer1';\nimport reducer2 from '@store/reducer2';\n...\nimport reducerN from '@store/reducerN';\n\n\nconst reducers = combineReducers({\n  reducer1,\n  reducer2,\n  ...\n  reducerN,\n});\n\nconst persistConfig = {\n  key: 'root',\n  timeout: 2000,\n  version: 1,\n\n  // \u0441\u043f\u0438\u0441\u043e\u043a \u0440\u0435\u0434\u044c\u044e\u0441\u0435\u0440\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0443\u0436\u043d\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\n  whitelist: ['reducer1', 'reducer2'],\n  storage\n};\n\nconst persistedReducer = persistReducer(persistConfig, reducers);\n\nconst store = configureStore({\n  reducer: persistedReducer,\n  devTools: process.env.NODE_ENV !== 'production',\n  middleware: getDefaultMiddleware =>\n    getDefaultMiddleware({\n      serializableCheck: false\n    })\n});\n")),(0,s.kt)("hr",null),(0,s.kt)("h2",{id:"persist-provider"},"Persist Provider"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"import React, { FC, ReactElement } from \"react\";\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { persistStore } from 'redux-persist';\nimport store from '@store/index';\nimport { Provider } from 'react-redux';\nimport { Preloader } from \"@npm-registry/eapteka-ui\";\n\nexport const AppReduxProvider: FC<{\n  children: ReactElement;\n}> = ({ children }) => {\n  return (\n    <Provider store={store}>\n      <PersistGate\n        loading={<Preloader position='center' size='l'/> }\n        persistor={persistStore(store)}\n      >\n        {children}\n      </PersistGate>\n    </Provider>\n  );\n};\n")),(0,s.kt)("hr",null),(0,s.kt)("h2",{id:"\u043f\u0440\u0438\u043c\u0435\u0440-store"},"\u041f\u0440\u0438\u043c\u0435\u0440 store"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import { bindActionCreators, configureStore } from '@reduxjs/toolkit';\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { counterSlice } from './counter/counter.slice';\nimport { usersSlice } from './users/users.slice';\nimport { usersThunks } from './users/users.thunks';\n\n// storeToolkit2\nexport const storeToolkit2 = configureStore({\n  reducer: {\n    counterStore: counterSlice.reducer,\n    usersStore: usersSlice.reducer,\n  },\n});\n\n// \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044f \u0432\u0441\u0435\u0433\u043e \u0441\u0442\u0435\u0439\u0442\u0430\ntype RootState = ReturnType<typeof storeToolkit2.getState>;\nexport default RootState;\n\n// \u0445\u0443\u043a \u0441\u043e \u0432\u0441\u0435\u043c \u0441\u0442\u0435\u0439\u0442\u043e\u043c\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n\n// \u0445\u0443\u043a \u0441\u043e \u0432\u0441\u0435\u043c\u0438 \u044d\u043a\u0448\u0435\u043d\u0430\u043c\u0438\nconst allActions = {\n  ...counterSlice.actions,\n  ...usersSlice.actions,\n  ...usersThunks,\n};\n\nexport const useSyncActions = () => {\n  const dispatch = useDispatch();\n\n  return bindActionCreators(allActions, dispatch);\n};\n")),(0,s.kt)("h3",{id:"counter-slice"},"Counter slice"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"export type TCounterState = {\n  counter: number;\n};\n\n\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { TCounterState } from './counter.types';\n\nconst initialCounterState: TCounterState = {\n  counter: 0,\n};\n\n// createSlice (\u0433\u043e\u0440\u0430\u0437\u0434\u043e \u0443\u0434\u043e\u0431\u043d\u0435\u0435 \u0447\u0435\u043c createReducer())\nexport const counterSlice = createSlice({\n  name: 'counter',\n\n  // initial state\n  initialState: initialCounterState,\n\n  // reducer with actions\n  reducers: {\n    // changeCounters (with return writing)\n    change: (state, { payload }: PayloadAction<number>) => {\n      return {\n        // ...state,\n        counter: payload, // \u0431\u0443\u0434\u0435\u0442 \u0432\u0441\u0435\u0433\u0434\u0430 \u0440\u0430\u0432\u0435\u043d payload (\u0431\u0435\u0437 \u0441\u0443\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f)\n      };\n    },\n\n    // \u043c\u043e\u0436\u043d\u043e \u043c\u0443\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u0441\u0442\u0435\u0439\u0442 (\u0438\u0437\u043c\u0435\u043d\u044f\u0442\u044c \u0442\u0435\u043a\u0443\u0449\u0438\u0435 \u043f\u043e\u043b\u044f)\n    // dicrementCounter\n    dicrementCounter(state) {\n      state.counter -= 1;\n    },\n\n    // incrementCounter\n    incrementCounter(state) {\n      state.counter += 1;\n    },\n\n    // changeCounter\n    changeCounter(state, action: PayloadAction<number>) {\n      state.counter += action.payload;\n    },\n\n    // clear\n    clearCounter: () => initialCounterState,\n    // \u0442\u0430\u043a\u0430\u044f \u0437\u0430\u043f\u0438\u0441\u044c \u044d\u043a\u0448\u0435\u043d\u043e\u0432 \u0433\u043e\u0440\u0430\u0437\u0434\u043e \u0443\u0434\u043e\u0431\u043d\u0435\u0435 \u0447\u0435\u043c createAction()\n  },\n});\n")),(0,s.kt)("h3",{id:"users-slice"},"Users slice"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"export type TUser = {\n  id: number;\n  name: string;\n  email: string;\n};\n\nexport type TUsersState = {\n  users: TUser[];\n  isLoading: boolean;\n  isSuccess: boolean;\n  isError: boolean;\n  errorMessage: string;\n};\n\n\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { TUser, TUsersState } from './users.types';\n\nconst usersInitialState: TUsersState = {\n  users: [],\n  isLoading: false,\n  isSuccess: false,\n  isError: false,\n  errorMessage: '',\n};\n\n// creater slice\nexport const usersSlice = createSlice({\n  name: 'users',\n\n  // initial state\n  initialState: usersInitialState,\n\n  // reducer with actions\n  reducers: {\n    resetUsersState(state) {\n      state.isLoading = false;\n      state.isError = false;\n      state.errorMessage = '';\n    },\n\n    // usersLoading\n    usersLoading(state, { payload }: PayloadAction<boolean>) {\n      state.isLoading = payload;\n    },\n\n    // usersLoading - 2 variant\n    usersLoading2: (state, { payload }: PayloadAction<boolean>) => {\n      return {\n        // \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0441\u0442\u0435\u0439\u0442\n        ...state,\n\n        // \u043c\u043e\u0434\u0438\u0444\u0446\u0438\u0440\u0443\u0435\u043c \u043f\u043e\u043b\u0435 \u0441\u0442\u0435\u0439\u0442\u0430\n        isLoading: payload,\n      };\n    },\n\n    // usersFetchingSuccess\n    usersSuccess(state, { payload }: PayloadAction<TUser[]>) {\n      state.isSuccess = true;\n      state.users = payload;\n    },\n\n    // usersFetchingError\n    usersError(state, { payload }: PayloadAction<string>) {\n      state.isError = true;\n      state.errorMessage = payload;\n    },\n\n    // clearUsers\n    clearUsers(state) {\n      state.users = [];\n    },\n\n    // addRandomUser\n    addRandomUser(state) {\n      state.users.push({\n        id: Math.round(Math.random() * 10000),\n        name: 'asdfasdf',\n        email: 'asdfasdf@mail.ru',\n      });\n    },\n\n    // addRandomUser2 - 2 variant\n    // (\u043f\u0440\u0438 \u0442\u0430\u043a\u043e\u0439 \u0437\u0430\u043f\u0438\u0441\u0438 \u043d\u0443\u0436\u043d\u043e \u0432\u0441\u0435\u0433\u0434\u0430 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u0441\u0442\u0435\u0439\u0442 ...state);\n    addRandomUser2: state => {\n      const randomId = Math.round(Math.random() * 10000);\n      const userObj = {\n        id: randomId,\n        name: `username-${randomId}`,\n        email: `username${randomId}@mail.com`,\n      };\n\n      return {\n        ...state, // \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0441\u0442\u0435\u0439\u0442\n        users: [...state.users, userObj], // \u043c\u043e\u0434\u0438\u0444\u0446\u0438\u0440\u0443\u0435\u043c \u043f\u043e\u043b\u0435 \u0441\u0442\u0435\u0439\u0442\u0430\n      };\n    },\n\n    // deleteUser\n    deleteUser(state, { payload }: PayloadAction<number>) {\n      state.users = state.users.filter(user => user.id !== payload);\n    },\n\n    // deleteUser2 - 2 variant\n    deleteUser2: (state, action) => {\n      return {\n        // \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u0441\u0442\u0435\u0439\u0442\n        ...state,\n\n        // \u043c\u043e\u0434\u0438\u0444\u0446\u0438\u0440\u0443\u0435\u043c \u043f\u043e\u043b\u0435 \u0441\u0442\u0435\u0439\u0442\u0430\n        users: state.users.filter(user => user.id !== action.payload),\n      };\n    },\n\n    // deleteLastUser\n    deleteLastUser(state) {\n      state.users.pop();\n    },\n  },\n});\n\n")),(0,s.kt)("h3",{id:"users-thunks"},"Users thunks"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"import axios from 'axios';\nimport { TUser } from './users.types';\nimport { Dispatch } from '@reduxjs/toolkit';\nimport { usersSlice } from './users.slice';\n\nconst { usersLoading, usersSuccess, usersError, resetUsersState } =\n  usersSlice.actions;\n\nconst fetchUsersThunk = () => async (dispatch: Dispatch) => {\n  dispatch(resetUsersState());\n  dispatch(usersLoading(true));\n\n  try {\n    // response typing\n    const response = await axios.get<TUser[]>(\n      'https://jsonplaceholder.typicode.com/users2',\n    );\n\n    // if success\n    setTimeout(() => {\n      dispatch(usersLoading(false));\n      dispatch(usersSuccess(response.data));\n    }, 1000);\n\n    // if error\n  } catch (e) {\n    dispatch(usersLoading(false));\n    dispatch(usersError(`${e}`));\n  }\n};\n\nexport const usersThunks = {\n  fetchUsersThunk,\n};\n\n")),(0,s.kt)("h3",{id:"use-inside-component"},"Use inside component"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useSyncActions, useAppSelector } from '@/store/redux-toolkit2';\nimport { Loader } from '@/components/ui';\nimport styles from './ReduxToolkit2.module.scss';\n\nconst ReduxToolkit2 = () => {\n  // get state from store by useAppSelector\n  const {\n    counterStore: { counter },\n    usersStore: { users, isLoading, isError, errorMessage },\n  } = useAppSelector(state => state);\n\n  // get actions\n  const {\n    changeCounter,\n    clearCounter,\n    dicrementCounter,\n    incrementCounter,\n    addRandomUser2,\n    clearUsers,\n    deleteUser,\n    deleteLastUser,\n    fetchUsersThunk,\n  } = useSyncActions();\n\n  return (\n    <section className={styles.ReduxToolkit2}>\n      <h2>\n        <mark>ReduxToolkit 2</mark>\n      </h2>\n      {/* count */}\n      <div>\n        <b>count</b>: {counter}\n\n        <button onClick={() => changeCounter(-100)}>-100</button>\n        <button onClick={() => changeCounter(-10)}>-10</button>\n        <button onClick={() => dicrementCounter()}>-1</button>\n        <button onClick={() => clearCounter()}>X</button>\n        <button onClick={() => incrementCounter()}>+1</button>\n        <button onClick={() => changeCounter(10)}>+10</button>\n        <button onClick={() => changeCounter(100)}>+100</button>\n      </div>\n      &nbsp;&nbsp;&nbsp;\n      {/* users */}\n      <div style={{ display: 'flex', alignItems: 'flex-start' }}>\n        <b>users</b>:\n        <ul style={{ margin: 0, paddingLeft: 8, listStyle: 'none' }}>\n          {/* loading */}\n          {isLoading && <Loader />}\n\n          {/* error */}\n          {isError && <span className='text-danger'>{`${errorMessage}`}</span>}\n\n          {/* users */}\n          {users.length\n            ? users.map(user => {\n                const { id, name, email } = user;\n\n                return (\n                  <li key={id}>\n                    <b>{`${id}`}</b>\n\n                    <span>{name}</span>\n                    &nbsp;(<a href={`mailto:${email}`}>{email}</a>) &nbsp;\n                    <b\n                      style={{ cursor: 'pointer' }}\n                      onClick={() => deleteUser(id)}\n                    >\n                      X\n                    </b>\n                  </li>\n                );\n              })\n            : 'No data'}\n        </ul>\n\n        {/* buttons */}\n        {/* thunks \u043d\u0443\u0436\u043d\u043e \u043f\u0440\u043e\u0434\u0438\u0441\u043f\u0430\u0447\u0438\u0432\u0430\u0442\u044c */}\n        <button onClick={() => fetchUsersThunk()}>\n          Fetch users\n        </button>\n        <button onClick={() => addRandomUser2()}>Add random user</button>\n        <button onClick={() => clearUsers()}>Clear users</button>\n        <button onClick={() => deleteLastUser()}>Delete last</button>\n        <button onClick={() => clearUsers()}>Clear users</button>\n      </div>\n    </section>\n  );\n};\n\nexport default ReduxToolkit2;\n\n")))}d.isMDXComponent=!0}}]);